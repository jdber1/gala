.. _whatsnew-1.0:

***********************
What's New in gala 1.0?
***********************

Overview
========

TODO:

Astropy 3.1 is a major release with a focus on performance enhancements, but also
adds significant new functionality since the 3.0.x series of releases.

In particular, this release includes:

* :ref:`whatsnew-3.1-tips`
* :ref:`whatsnew-3.1-uncertainty`
* :ref:`whatsnew-3.1-transit-periodogram`
* :ref:`whatsnew-3.1-coordinates`
* :ref:`whatsnew-3.1-table`
* :ref:`whatsnew-3.1-time`
* :ref:`whatsnew-3.1-nddata`
* :ref:`whatsnew-3.1-nocopy-unit`
* :ref:`whatsnew-3.1-tcmb`
* :ref:`whatsnew-3.1-littleh`
* :ref:`whatsnew-3.1-default-cosmology`
* :ref:`whatsnew-3.1-faster-cosmology`
* :ref:`whatsnew-3.1-wcsaxes`
* :ref:`whatsnew-3.1-imshow-norm`
* :ref:`whatsnew-3.1-fits`
* :ref:`whatsnew-3.1-ape14`

In addition to these major changes, Astropy 3.1 includes a large number of
smaller improvements and bug fixes, which are described in the
:ref:`changelog`. By the numbers:


* 906 issues have been closed since v3.0
* 437 pull requests have been merged since v3.0
* 92 distinct people have contributed code to this release, 48 of which are
  first time contributors to Astropy.

.. _whatsnew-3.1-tips:

Performance Tips
================

We now include a standard section called **Performance tips** in the
documentation for each sub-package (when appropriate) which helps you get the
best performance out of a given sub-package. For example, if you want to
improve the performance of your code when using :class:`~astropy.units.Unit`
and :class:`~astropy.units.Quantity`, you can read up about it in the
:ref:`Performance tips for astropy.units <astropy-units-performance>`.

.. _whatsnew-3.1-uncertainty:

New Sub-package for Uncertainties and Distributions
===================================================

Astropy 3.1 includes a new experimentation sub-package: :ref:`astropy-uncertainty`.
Currently this sub-package provides uncertainty propagation and classes for
representing distributions using  a Monte Carlo sampling technique, which is
useful for some cases but certainly not all.  The longer-term
plan is to integrate other uncertainty propagation techniques to address typical
astronomy uses cases, including integrating with the already-existing
uncertainty classes that are focused on representing uncertainties in
`astropy.nddata`.

To demonstrate this new functionality, the example below shows propagation of
uncertainty in the geometric mean of three numbers that have units:

.. plot::
  :include-source:
  :align: center

  import numpy as np
  from astropy import units as u
  from astropy import uncertainty as unc
  from astropy.visualization import quantity_support
  from matplotlib import pyplot as plt

  np.random.seed(12345)

  a = unc.normal(1.5*u.kpc, std=50*u.pc, n_samples=10000)
  b = unc.uniform(center=3*u.kpc, width=800*u.pc, n_samples=10000)
  c = unc.Distribution(((np.random.beta(2,5, 10000)-(2/7))/2 + 3)*u.kpc)
  d = (a * b * c) ** (1/3)

  with quantity_support():
      plt.hist(d.distribution, bins=50)
      plt.title(r'$\mu={0.value:.2f}$ {0.unit}, $\sigma={1.value:.2f}$ {1.unit}'.format(d.pdf_mean, d.pdf_std))


This sub-package should be considered experimental and subject to API changes in
the future if user feedback calls for it.


.. _whatsnew-3.1-transit-periodogram:

New Box Least Squares Periodogram
=================================

Astropy now has an implementation of the :ref:`stats-bls`
that is commonly used to detect transiting exoplanets and eclipsing
binary star systems. The interface has been designed to match the
`~astropy.stats.LombScargle` periodogram, and it can be used with a time series
dataset ``time``, ``flux``, and ``flux_err`` as follows::

  >>> from astropy import units as u
  >>> from astropy.stats import BoxLeastSquares
  >>> model = BoxLeastSquares(time * u.day, flux, flux_err=0.01)  # doctest: +SKIP
  >>> duration = 0.2 * u.day
  >>> periodogram = model.autopower(duration)  # doctest: +SKIP

The resulting periodogram will look something like the following when the time
series includes a transiting planet:

.. plot::
   :context: reset
   :align: center

    import numpy as np
    import matplotlib.pyplot as plt
    from astropy.stats import BoxLeastSquares

    np.random.seed(42)
    t = np.random.uniform(0, 20, 2000)
    y = np.ones_like(t) - 0.1*((t%3)<0.2) + 0.01*np.random.randn(len(t))
    model = BoxLeastSquares(t, y, dy=0.01)
    periodogram = model.autopower(0.2)

    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 8))
    ax1.scatter(t, y, c="k", s=1)
    ax1.set_xlabel("time [day]")
    ax1.set_xlabel("flux [arbitrary]")

    ax2.plot(periodogram.period, periodogram.power, "k")
    ax2.set_xlabel("period [day]")
    ax2.set_ylabel("power")
